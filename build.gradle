plugins {
    id 'fabric-loom' version '1.11-SNAPSHOT'
    id 'maven-publish'
}

archivesBaseName = project.archives_base_name
group = project.maven_group

boolean isBuild = System.getenv('GITHUB_WORKFLOW') == 'build'
version = !isBuild ? project.mod_version : "${project.mod_version}+build.${System.getenv('GITHUB_RUN_NUMBER')}"

allprojects {
    apply plugin: 'fabric-loom'
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21

    repositories {
        maven {
            name 'FabricMC'
            url 'https://maven.fabricmc.net'
        }
    }

    dependencies {
        //to change the versions see the libs.versions.toml file
        minecraft libs.minecraft
        mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
        modImplementation libs.fabric.loader

        modImplementation libs.fabric.api
    }

    processResources {
        inputs.property 'version', rootProject.version

        filesMatching('fabric.mod.json') {
            expand 'version': rootProject.version
        }
    }

    tasks.withType(JavaCompile).configureEach {
        // ensure that the encoding is set to UTF-8, no matter what the system default is
        // this fixes some edge cases with special characters not displaying correctly
        // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
        // If Javadoc is generated, this must be specified in that task too.
        it.options.encoding = 'UTF-8'

        it.options.release = 21
    }

    java {
        // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
        // if it is present.
        // If you remove this line, sources will not be generated.
        withSourcesJar()
    }

    jar {
        from('LICENSE') {
            rename { "${it}_${project.archivesBaseName}" }
        }
    }
}

subprojects {
    apply plugin: 'fabric-loom'
    apply plugin: 'maven-publish'
    apply plugin: 'java-library'

    version = rootProject.version
}

repositories {
    maven {
        name 'JitPack'
        url 'https://jitpack.io'
    }
    maven {
        url 'https://maven.nucleoid.xyz/'
    }
}

rootProject.processResources.dependsOn(project(':api').processResources)

dependencies {
    // Add subprojects as dependency of root project
    implementation project(path: ':api', configuration: 'namedElements')
    include project(':api')

    // FabricPlaceholderApi
    modImplementation libs.placeholder.api
    include libs.placeholder.api
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    repositories {
        mavenLocal()
    }
}